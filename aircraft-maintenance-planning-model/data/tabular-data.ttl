# baseURI: http://onto.fel.cvut.cz/ontologies/csat/tabular-data-0.1
# imports: http://onto.fel.cvut.cz/ontologies/csat/data-lib
# imports: http://onto.fel.cvut.cz/ontologies/s-pipes-lib

@prefix ata: <http://onto.fel.cvut.cz/voc/ata-100/> .
@prefix cm: <http://onto.fel.cvut.cz/ontologies/csat-maintenance/> .
@prefix cmd: <http://onto.fel.cvut.cz/ontologies/csat-maintenance-data/> .
@prefix config: <http://onto.fel.cvut.cz/ontologies/csat/config/> .
@prefix csvw: <http://www.w3.org/ns/csvw#> .
@prefix doc: <http://onto.fel.cvut.cz/ontologies/documentation/> .
@prefix kbss-module: <http://onto.fel.cvut.cz/ontologies/lib/module/> .
@prefix km-sesame: <http://onto.fel.cvut.cz/ontologies/lib/module/sesame/> .
@prefix km-tabular: <http://onto.fel.cvut.cz/ontologies/lib/module/tabular/> .
@prefix ms: <http://onto.fel.cvut.cz/ontologies/maintenance-schema/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix td: <http://onto.fel.cvut.cz/ontologies/csat/tabular-data-0.1/> .
@prefix ufo: <http://onto.fel.cvut.cz/ontologies/ufo/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://onto.fel.cvut.cz/ontologies/csat/tabular-data-0.1>
  a owl:Ontology ;
  owl:imports <http://onto.fel.cvut.cz/ontologies/csat/data-lib> ;
  owl:imports <http://onto.fel.cvut.cz/ontologies/s-pipes-lib> ;
.
td:construct-day-bound-event-duration
  a sml:ApplyConstruct ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 1 - construct day-bound-event durations
CONSTRUCT {
     ?dayBoundEvent cm:duration-in-hours ?durationInHours .
}
WHERE {
   ?dayBoundEvent a cm:day-bound-event  ;
         cm:start-time ?t1 ;
         cm:end-time ?t2 ;
    .
    FILTER NOT EXISTS {
          ?dayBoundEvent cm:duration-in-hours ?durationInHoursNE .
    }

    BIND(IF(str(?t2) = \"00:00:00\" || str(?t2) = \"00:00\" , \"24:00:00\"^^xsd:time, ?t2) as ?t2Normalized)
    BIND(xsd:decimal(replace(str(?t1), \":.*\", \"\")) as ?t1Hours)
    BIND(xsd:decimal(replace(str(?t1), \"(^..:|:..$)\", \"\")) as ?t1Minutes)
    BIND(coalesce(xsd:decimal(replace(str(?t1), \".*:.*:\", \"\")),0) as ?t1Seconds)
    BIND(xsd:decimal(replace(str(?t2Normalized), \":.*\", \"\")) as ?t2Hours)
    BIND(xsd:decimal(replace(str(?t2Normalized), \"(^..:|:..$)\", \"\")) as ?t2Minutes)
    BIND(coalesce(xsd:decimal(replace(str(?t2Normalized), \".*:.*:\", \"\")),0) as ?t2Seconds)
    BIND((?t2Hours-?t1Hours)+(?t2Minutes-?t1Minutes)/60+(?t2Seconds-?t1Seconds)/3600 as ?durationInHours)
}""" ;
    ] ;
  rdfs:label "construct-day-bound-event-duration" ;
.
td:construct-maintenance-group-abbreviations
  a sml:ApplyConstruct ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# there are two maintenance groups with same abbreviation
ASK
WHERE {
      ?maintenanceGroup1  dl:has-simple-abbreviation ?maintenanceGroupAbbr .
      ?maintenanceGroup2  dl:has-simple-abbreviation ?maintenanceGroupAbbr .
       FILTER(?maintenanceGroup1 != ?maintenanceGroup2)
}""" ;
    ] ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 1 - construct has-abbreviation mapping with preferred language tag
CONSTRUCT {
      ?maintenanceGroup  dl:has-main-abbreviation ?maintenanceGroupAbbrWithLang .
}
WHERE {
       ?maintenanceGroup rdfs:subClassOf+ cm:maintenance-group ;
                   cm:has-abbreviation ?maintenanceGroupAbbrWithLang .
       FILTER(lang(?maintenanceGroupAbbrWithLang) = \"en\")
}""" ;
    ] ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 2 - construct has-abbreviation mapping with no language tag
CONSTRUCT {
      ?maintenanceGroup  dl:has-simple-abbreviation ?maintenanceGroupAbbr .
}
WHERE {
       ?maintenanceGroup rdfs:subClassOf+ cm:maintenance-group ;
                   cm:has-abbreviation ?maintenanceGroupAbbrWithLang .
       BIND(str(?maintenanceGroupAbbrWithLang) as ?maintenanceGroupAbbr)
}""" ;
    ] ;
  sml:replace true ;
  rdfs:label "construct-maintenance-group-abbreviations" ;
.
td:deploy-data_Return
  a sml:ReturnRDF ;
  sml:serialization sml:Turtle ;
.
td:deploy-to-rdf4j-server
  a kbss-module:deploy ;
  sm:next td:deploy-data_Return ;
  rdfs:label "deploy" ;
.
td:fix-unsupported-datatypes
  a sml:ApplyConstruct ;
  sm:next td:transform-data_Return ;
  sm:nodeX 596 ;
  sm:nodeY 824 ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 1 - apply workaround for unsupported axioms
CONSTRUCT {
     ?s ?p ?oStr .
}
WHERE {
     ?s ?p ?o  .
     FILTER(datatype(?o) in (xsd:date, xsd:time) )
     BIND(str(?o) as ?oStr)
}""" ;
    ] ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """#2 - copy supported axioms
CONSTRUCT {
     ?s ?p ?o .
}
WHERE {
    ?s ?p ?o  .
    FILTER NOT EXISTS {
           FILTER(datatype(?o) in (xsd:date, xsd:time) )
    }
}""" ;
    ] ;
  sml:replace true ;
  rdfs:label "fix-unsupported-datatypes" ;
.
td:import-scheme
  a sml:ImportRDFFromWorkspace ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# there are two different scopes with same abbreviation
ASK
WHERE {
         ?mg1 rdfs:subClassOf+ cm:maintenance-group ;
                      cm:has-abbreviation ?mg1Abbr .
         ?mg2 rdfs:subClassOf+ cm:maintenance-group ;
                      cm:has-abbreviation ?mg2Abbr .
         FILTER(str(?mg1Abbr) = str(?mg2Abbr))
         FILTER(?mgr1 != ?mgr2)
}""" ;
    ] ;
  sm:next td:construct-maintenance-group-abbreviations ;
  sml:baseURI "http://onto.fel.cvut.cz/ontologies/csat-maintenance" ;
  sml:ignoreImports true ;
  rdfs:label "import-scheme" ;
.
td:merge
  a sml:Merge ;
  sm:next td:deploy-to-rdf4j-server ;
  sm:next td:fix-unsupported-datatypes ;
  rdfs:label "merge" ;
.
td:rdfize-input-data
  a kbss-module:tabular ;
  km-tabular:source-resource-uri [
      sp:varName "datasetResource" ;
    ] ;
  rdfs:label "rdfize-input-data" ;
.
td:transform-data_Return
  a sml:ReturnRDF ;
  sml:serialization sml:Turtle ;
.

# baseURI: http://onto.fel.cvut.cz/ontologies/csat/wo-tc-ref-0.1
# imports: http://onto.fel.cvut.cz/ontologies/csat/tabular-data-0.1
# imports: http://onto.fel.cvut.cz/ontologies/s-pipes-lib

@prefix : <http://onto.fel.cvut.cz/ontologies/csat/wo-tc-ref-0.1/> .
@prefix ata: <http://onto.fel.cvut.cz/voc/ata-100/> .
@prefix cm: <http://onto.fel.cvut.cz/ontologies/csat-maintenance/> .
@prefix cmd: <http://onto.fel.cvut.cz/ontologies/csat-maintenance-data/> .
@prefix config: <http://onto.fel.cvut.cz/ontologies/csat/config/> .
@prefix csvw: <http://www.w3.org/ns/csvw#> .
@prefix doc: <http://onto.fel.cvut.cz/ontologies/documentation/> .
@prefix kbss-module: <http://onto.fel.cvut.cz/ontologies/lib/module/> .
@prefix km-sesame: <http://onto.fel.cvut.cz/ontologies/lib/module/sesame/> .
@prefix ms: <http://onto.fel.cvut.cz/ontologies/maintenance-schema/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix td: <http://onto.fel.cvut.cz/ontologies/csat/tabular-data-0.1/> .
@prefix ufo: <http://onto.fel.cvut.cz/ontologies/ufo/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

td:deploy-data_Return
  rdfs:label "deploy-wo-tc-ref-data" ;
.
td:rdfize-input-data
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.01 column AC has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :AC ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.02 column A_C_age has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :A_C_age ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.03 column WP has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :WP ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.04 column CSAT_WO_TC has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :CSAT_WO_TC ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.05 column type has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :type ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.06 column state has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :state ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.07 column ATA has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :ATA ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.08 column issue_date has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :issue_date ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.09 column sequence has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :sequence ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.10 column WO_text has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :WO_text ?notExistValue .
    }
}""" ;
    ] ;
  <http://onto.fel.cvut.cz/ontologies/lib/module/tabular/data-prefix> [
      a sp:str ;
      sp:arg1 : ;
    ] ;
  sm:next :construct-csat-maintenance-data ;
.
td:transform-data_Return
  rdfs:label "transform-wo-tc-ref-data" ;
.
<http://onto.fel.cvut.cz/ontologies/csat/wo-tc-ref-0.1>
  a owl:Ontology ;
  owl:imports <http://onto.fel.cvut.cz/ontologies/csat/tabular-data-0.1> ;
  owl:imports <http://onto.fel.cvut.cz/ontologies/s-pipes-lib> ;
.
:construct-csat-maintenance-data
  a sml:ApplyConstruct ;
  sm:next :transform ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 1 - extract ontology
CONSTRUCT {
    <http://onto.fel.cvut.cz/ontologies/csat-maintenance/wo-tc-ref-34567> a owl:Ontology ;
              owl:imports <http://onto.fel.cvut.cz/ontologies/csat-maintenance> .
        
    # workpackage description
    ?workpackageIRI a cm:workpackage, owl:NamedIndividual ;
              cm:id ?WP .
                    
    # task execution description
    ?task_executionIRI a cm:complex-execution, ?task_typeIRI, owl:NamedIndividual;
           a ?task_super_classIRI; # TODO can be done by inference
           cm:issue-time ?issue_date;
            cm:end-time ?closing_date;
            cm:has-work-order-step ?task_step_executionIRI;
			cm:is-part-of-workpackage ?workpackageIRI .
    
    ?task_executionIRI cm:references-task ?referenced_task_executionIRI .

    # task execution type
    ?task_typeIRI a owl:Class;
            rdfs:subClassOf ?task_super_classIRI;
            cm:references-ata-code ?ataIRI;
			cm:id ?CSAT_WO_TC .

    # task step execution
    ?task_step_executionIRI a ?task_step_execution_typeIRI, owl:NamedIndividual;
     		cm:step-index ?workstepTyped;
            cm:work-order-text ?WO_text .
    
    ?task_step_executionIRI cm:work-order-action-text ?WO_action .
	
    ?task_step_execution_typeIRI a owl:Class;
            rdfs:subClassOf cm:work-order-step.
			
	# aircraft description
	?workpackageIRI cm:is-repair-of ?aircraftIRI.
	?aircraftIRI a cm:aircraft, owl:NamedIndividual;
			cm:model ?acModelFixed ;
	        cm:age ?acAge .
} WHERE {

    ?rd :AC ?AC .
    ?rd :A_C_age ?A_C_age .
    ?rd :WP ?WP .
    ?rd :CSAT_WO_TC ?CSAT_WO_TC .
    ?rd :type ?type .
    ?rd :state ?state .
    ?rd :ATA ?ATA .
    OPTIONAL {
        ?rd :Customer_ref ?Customer_ref .
    }
    OPTIONAL {
        ?rd :TC_reference ?TC_reference .
    }
    ?rd :issue_date ?issue_date .
    OPTIONAL {
        ?rd :closing_date ?closing_date .
    }
    ?rd :sequence ?sequence .
    ?rd :WO_text ?WO_text .
    OPTIONAL {
        ?rd :WO_action ?WO_action .
    }


    BIND(replace(replace(?WP, \" \", \"-\"),\"/\", \"--\")  as ?workpackageFixed)
    BIND(replace(replace(?TC_reference, \" \", \"-\"),\"/\", \"--\")  as ?tcReferenceFixed)
    BIND(replace(replace(?CSAT_WO_TC, \" \", \"-\"),\"/\", \"--\")  as ?wotcFixed)
    BIND(concat(?workpackageFixed, \"--\", ?wotcFixed) as ?task_execution)
    BIND(iri(concat(str(cmd:), ?workpackageFixed)) as ?workpackageIRI)   
    BIND(iri(concat(str(cmd:), ?task_execution)) as ?task_executionIRI)
    BIND(?AC as ?acModel)
    BIND(replace(replace(?AC, \" \", \"-\"),\"/\", \"--\")  as ?acModelFixed)
    BIND(?A_C_age as ?acAge)
    BIND(IRI(concat(str(cmd:), ?acModelFixed, \"-\", ?workpackageFixed)) as ?aircraftIRI)
    BIND(concat(?type, \"-\",   ?wotcFixed) as ?taskType)     
    BIND(concat(?taskType, \"-\",   ?sequence) as ?taskStepExecutionType)
    BIND(concat(?workpackageFixed, \"-\",   ?taskStepExecutionType) as ?taskStepExecution)

    BIND(iri(concat(str(cmd:), ?taskStepExecution)) as ?task_step_executionIRI) # instance
    BIND(IRI(concat(str(cm:), ?taskType)) as ?task_typeIRI)

    BIND(IF(?type =  \"TC\", \"task-card\",  ?x) as ?tc)
    BIND(IF(?type =  \"S\", \"scheduled-work-order\",  ?x) as ?s)
    BIND(IF(?type =  \"M\", \"maintenance-work-order\",   ?x) as ?m)
    BIND(COALESCE(?tc, ?s, ?m) as ?task_super_class)
    BIND(IRI(concat(str(cm:), ?task_super_class)) as ?task_super_classIRI)
    BIND(IRI(concat(str(cm:), ?taskStepExecutionType)) as ?task_step_execution_typeIRI)
    BIND(STRDT(str(?sequence), xsd:integer) as ?workstepTyped)
    BIND(concat(?workpackageFixed, \"--\",   ?tcReferenceFixed) as ?referencedTaskExecution)
    BIND(iri(concat(str(cmd:), ?referencedTaskExecution)) as ?referenced_task_executionIRI)
    BIND(IRI(concat(str(ata:), \"ata-\", ?ATA)) as ?ataIRI)
     
}""" ;
    ] ;
  sml:replace true ;
  rdfs:label "construct-csat-maintenance-data" ;
.
:deploy-to-rdf4j-server
  a kbss-module:deploy ;
  sm:next :deploy-wo-tc-ref_Return ;
  rdfs:label "deploy" ;
.
:deploy-wo-tc-ref-data
  a sm:Function ;
  sm:returnModule td:deploy-data_Return ;
  rdfs:subClassOf sm:Functions ;
.
:transform
  a sml:ApplyConstruct ;
  sm:next td:merge ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 1 - convert endDate
CONSTRUCT {
     ?s  cm:end-time ?endDate .
} WHERE {
     ?s  cm:end-timeX ?endDateNotParsed .
#      BIND(spif:parseDate(?endDateNotParsed ,\"dd.MM.yyyy\") as ?endDate)
}""" ;
    ] ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 1 - convert issueDate
CONSTRUCT {
     ?s  cm:issue-time ?issueDate .
} WHERE {
     ?s  cm:issue-timeX ?issueDateNotParsed .
#      BIND(spif:parseDate(?issueDateNotParsed ,\"dd.MM.yyyy\") as ?issueDate)
}""" ;
    ] ;
  sml:replace false ;
.
:transform-wo-tc-ref-data
  a sm:Function ;
  sm:returnModule td:transform-data_Return ;
  rdfs:subClassOf sm:Functions ;
.

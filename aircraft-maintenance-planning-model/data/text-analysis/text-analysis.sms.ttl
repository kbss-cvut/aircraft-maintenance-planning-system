# baseURI: http://onto.fel.cvut.cz/ontologies/csat/text-analysis-0.1
# imports: http://onto.fel.cvut.cz/ontologies/csat-maintenance
# imports: http://onto.fel.cvut.cz/ontologies/csat/tabular-data-0.1
# imports: http://onto.fel.cvut.cz/ontologies/s-pipes-lib

@prefix : <http://onto.fel.cvut.cz/ontologies/csat/text-analysis-0.1/> .
@prefix ata: <http://onto.fel.cvut.cz/voc/ata-100/> .
@prefix cm: <http://onto.fel.cvut.cz/ontologies/csat-maintenance/> .
@prefix cmd: <http://onto.fel.cvut.cz/ontologies/csat-maintenance-data/> .
@prefix config: <http://onto.fel.cvut.cz/ontologies/csat/config/> .
@prefix csvw: <http://www.w3.org/ns/csvw#> .
@prefix dl: <http://onto.fel.cvut.cz/ontologies/csat/data-lib/> .
@prefix doc: <http://onto.fel.cvut.cz/ontologies/documentation/> .
@prefix kbss-module: <http://onto.fel.cvut.cz/ontologies/lib/module/> .
@prefix kbss-csvw: <https://onto.fel.cvut.cz/ontologies/extension/csvw/> .
@prefix km-rdf4j: <http://onto.fel.cvut.cz/ontologies/lib/module/rdf4j/> .
@prefix km-sesame: <http://onto.fel.cvut.cz/ontologies/lib/module/sesame/> .
@prefix km-tabular: <http://onto.fel.cvut.cz/ontologies/lib/module/tabular/> .
@prefix km-convert: <http://onto.fel.cvut.cz/ontologies/lib/module/RDF2CSV/> .
@prefix km-terms: <http://onto.fel.cvut.cz/ontologies/lib/module/extract-term-occurrences/> .
@prefix ms: <http://onto.fel.cvut.cz/ontologies/maintenance-schema/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix td: <http://onto.fel.cvut.cz/ontologies/csat/tabular-data-0.1/> .
@prefix ufo: <http://onto.fel.cvut.cz/ontologies/ufo/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix termit: <http://onto.fel.cvut.cz/ontologies/application/termit/pojem/> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix cm: <http://onto.fel.cvut.cz/ontologies/csat-maintenance/> .

<http://onto.fel.cvut.cz/ontologies/csat/text-analysis-0.1>
  a owl:Ontology ;
  owl:imports <http://onto.fel.cvut.cz/ontologies/s-pipes-lib> ;
.


:convert-html
  a kbss-module:tabular;
  sm:next :extract-term-occurrences;
  km-tabular:source-resource-uri [
      sp:varName "datasetResource" ;
    ] ;
  km-tabular:process-html-file true;
  km-tabular:data-prefix "http://onto.fel.cvut.cz/ontologies/csat/text-analysis-0.1/";
.


:extract-term-occurrences
  a kbss-module:extract-term-occurrences;
  sm:next :construct-row-triples ;
  km-terms:data-prefix "http://onto.fel.cvut.cz/ontologies/csat/text-analysis-0.1/";
  sml:replace false;
.

:import-vocabulary
  a sml:ImportRDFFromWorkspace ;
  sm:next :construct-row-triples ;
  sm:next :apply-part-of-rule;
  sml:baseURI ""; # Fill with vocabulary URI (example "http://onto.fel.cvut.cz/ontologies/slovník/agendový/popis-dat/pojem/glosář/instance1755087557" )
  sml:ignoreImports true ;
.

:construct-row-triples
  a sml:ApplyConstruct ;
  sm:next :transform-to-output-format ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 1 - Apply algorithm 
      
CONSTRUCT {
  ?row
    :WorkOrderId    ?woTc ;
    :No_            ?rowNumber ;
    :TaskCardId     ?tcRef ;
    :WO_text        ?woText;
    :failureMode    ?failMode;
    :mulFailures         ?mulFailures;
    :component      ?component;
    :mulComponents  ?mulComponents;
    :occurrences    ?occurrence;
    :references-text ?text.

  ?occurrence a ?type;
      :references-annotation ?annotation;
      :references-text ?text ;
      :whole-text ?wholeText ;
      termit:je-výskytem-termu   ?term ;
      termit:má-koncovou-pozici  ?endIndex ;
      termit:property ?property;
      termit:resource ?resource;
      termit:typeof ?typeof;
      termit:má-skóre ?finalScore;
      :resourceIri ?resourceIri;
      termit:má-startovní-pozici ?startIndex.

} WHERE {

  ?occurrence
    :references-annotation ?annotation;
    :references-text ?text ;
    :whole-text ?wholeText ;
    :resource ?resource;

    termit:je-výskytem-termu   ?term ;
    termit:má-koncovou-pozici  ?endIndex ;
    termit:má-startovní-pozici ?startIndex.

  OPTIONAL {?occurrence termit:má-skóre ?score;}
  BIND(IF(BOUND(?score), ?score, "10.0"^^xsd:float) AS ?finalScore) # this is workaround for better score comparing

  ?row 
    :CSAT_WO_TC    ?woTc ;
    :No_           ?rowNumber ;
    :TC_reference  ?tcRef ;
    :WO_text       ?woText.

  FILTER(?woText = ?wholeText)
  BIND(IRI(?resource) AS ?resourceIri)

  ?resourceIri a skos:Concept;
        skos:broader ?type.

  OPTIONAL{
    ?mulComponents a skos:Concept;
        skos:broader+ cm:component .
    FILTER(?mulComponents = ?resourceIri)
  }
  
  OPTIONAL{
    ?mulFailures a skos:Concept;
       skos:broader+ cm:failure.
    FILTER(?mulFailures = ?resourceIri)
  }
}""" ;
    ] ;
  sml:replace true ;
.

:transform-to-output-format
  a sml:ApplyConstruct ;
  sm:next :select-final-component;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """

CONSTRUCT{

  ?row  rdf:type csvw:Row;
        :DocumentLineNumber           ?rowNumber ;
        :WorkOrderId      ?woTC ;
        :TaskCardId    ?TCref ; 
        :OriginalText ?originalText;
        :AnnotatedText ?annotatedText;
        :finalComp ?finalComp;
        :finalFailure ?finalFailure.

}WHERE{
  ?row 
      :No_              ?no ;
      :WorkOrderId      ?woTC ;
      :TaskCardId       ?TCref ;  
      :references-text  ?originalText;
      :WO_text          ?annotatedText;
      :occurrences      ?occurrence.
  
  BIND(STRBEFORE(?no, ".") AS ?rowNumber)

  OPTIONAL{
    ?occurrence a cm:component;
                termit:má-skóre ?componentScore;
                termit:je-výskytem-termu ?t1.

    BIND(?occurrence AS ?finalComp)
    BIND(?t1 AS ?compLabel)
  }

  OPTIONAL{
    ?occurrence a cm:failure;
            termit:je-výskytem-termu ?t;
            termit:má-skóre ?failScore.
    BIND(?failScore AS ?failureScore)
    BIND(?occurrence AS ?finalFailure)
    BIND(?t AS ?failureLabel)
  }
}""" ;
    ] ;
  sml:replace false ;
.

:select-final-component
  a sml:ApplyConstruct ;
  sm:next :select-final-failure;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """

  CONSTRUCT{
    ?row
        :ComponentUri ?resource;
        :selectedComponentNode ?selectedComponent;
        :componentScore ?maxScore;
        :compUri ?chosenComp;
        :compLabel ?chosenCompLabel;
        :resource ?resource;
  
   }WHERE{
    ?row rdf:type csvw:Row;
        :finalComp ?chosenComp .

    ?chosenComp termit:má-skóre ?maxScore;
        :resourceIri ?resource.
    
    FILTER NOT EXISTS {
       ?row :finalComp ?otherComp .
       ?otherComp termit:má-skóre ?otherScore.
       FILTER(?chosenComp != ?otherComp)
       FILTER(?maxScore <= ?otherScore)
    }

}""" ;
    ] ;
  sml:replace false ;
.

:select-final-failure
  a sml:ApplyConstruct ;
  sm:next :apply-part-of-rule ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """

  CONSTRUCT{
    ?row
        :FailureUri ?resource;
        :FailureLabel ?chosenFailureLabel;
        :failureScore ?maxScore;
        :selectedFailureNode ?selectedFailure;
  
  }WHERE{
   ?row rdf:type csvw:Row;
        :finalFailure ?chosenFailure .

    ?chosenFailure termit:má-skóre ?maxScore;
        :resourceIri ?resource.
    
  FILTER NOT EXISTS {
       ?row :finalFailure ?otherFailure .
       ?otherFailure termit:má-skóre ?otherScore.
       FILTER(?chosenFailure != ?otherFailure)
       FILTER(?maxScore <= ?otherScore)
    }
}""" ;
    ] ;
  sml:replace false ;
.

:apply-part-of-rule
  a sml:ApplyConstruct ;
  sm:next :construct-multiple-components-and-failures ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """

  CONSTRUCT{
    ?row  :ruledComponent ?compA;

  }WHERE{
    ?row  a csvw:Row;
          :finalComp ?compA;
          :finalComp ?compB.
    
    OPTIONAL { ?row :ComponentUri ?componentUri }
    
    ?compA  a cm:component;
            :resourceIri/termit:part-of ?componentResourceB;
            :resourceIri/skos:prefLabel ?label.

    ?compB  a cm:component;
            :resourceIri ?componentResourceB.

    FILTER (!BOUND(?componentUri))
    FILTER( ?compA != ?compB )
  }
""" ;
    ] ;
  sml:replace false ;
.


:construct-multiple-components-and-failures
  a sml:ApplyConstruct ;
  sm:next :concatenate-multiple-components;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """

  CONSTRUCT{
    ?row  a csvw:Row;
          :AggregateScore ?aggregateScore;
          :IsConfirmed ?isConfirmed;
          :FailureScore ?finalFailureScore;
          :FailureLabel ?failureLabel;
          :FailureLabel ?failureLabel;
          :FailureUri   ?failureUri;
          :ComponentUri ?componentUri;
          :ComponentLabel ?componentLabel;
          :ComponentScore ?finalComponentScore;
          :multipleComponents ?mulComponentsLabel;
          :multipleComponents ?otherComponentLabel;
          :multipleFailures ?tmpFailureLabel;
          :multipleFailures ?otherFailureLabel;
          :DocumentLineNumber ?lineNumber ;
          :WorkOrderId        ?woID ;
          :WO_text            ?woText;
          :AnnotatedText      ?annotatedText;
          :OriginalText       ?originalText;
          :TaskCardId           ?taskCardId.

  }WHERE{
    ?row  a csvw:Row;
          :DocumentLineNumber   ?lineNumber;
          :WorkOrderId          ?woID;
          :WO_text              ?woText;
          :AnnotatedText        ?annotatedText;
          :OriginalText         ?originalText;
          :TaskCardId           ?taskCardId.

    OPTIONAL { ?row :componentScore ?compScore   } 
    OPTIONAL { ?row :failureScore ?failureScore  }
    OPTIONAL { ?row :FailureUri ?failureUri      }
    OPTIONAL { ?row :FailureUri/skos:prefLabel ?failureLabel}

    OPTIONAL{ 
      ?row :ComponentUri ?compUri.
      ?compUri skos:prefLabel ?chosenComponentLabel.
    }
    
    OPTIONAL{
      ?row :ruledComponent ?ruledComp.
      ?ruledComp  termit:má-skóre ?ruledCompScore;
                  :resourceIri ?componentResource.
      ?componentResource skos:prefLabel ?ruledComponentLabel.
    }

    BIND(IF(BOUND(?ruledComponentLabel), ?ruledComponentLabel, ?chosenComponentLabel) AS ?componentLabel)
    BIND(IF(BOUND(?componentResource), ?componentResource, ?compUri) AS ?componentUri)

    OPTIONAL{ 
      ?row  :finalFailure ?failure;
            :finalFailure ?otherFailure.
        
      ?failure :resourceIri/skos:prefLabel ?tmpFailureLabel;
                      termit:má-skóre ?tmpFailureScore.
      ?otherFailure :resourceIri/skos:prefLabel ?otherFailureLabel;
                      termit:má-skóre ?otherFailureScore.
      FILTER(?failure != ?otherFailure)
    }

    OPTIONAL{ 
      ?row  :finalComp ?mulComponents;
            :finalComp ?otherComponent.
        
      ?mulComponents :resourceIri/skos:prefLabel ?mulComponentsLabel;
                      termit:má-skóre ?tmpCompScore.
      ?otherComponent :resourceIri/skos:prefLabel ?otherComponentLabel;
                      termit:má-skóre ?otherCompScore.
      FILTER(?mulComponents != ?otherComponent)
    }
    
    BIND((?compScore * ?failureScore) AS ?tmpScore)
    BIND(IF(?compScore = "10.0"^^xsd:float || ?failureScore = "10.0"^^xsd:float, "TRUE", "FALSE") AS ?tmpIsConfirmed)
    BIND(IF(!BOUND(?tmpIsConfirmed), "FALSE", ?tmpIsConfirmed) AS ?isConfirmed)
    BIND(IF(BOUND(?ruledCompScore), ?ruledCompScore, ?compScore) AS ?tmpComponentScore)
    BIND(IF(?tmpComponentScore = "10"^^xsd:float, "1.0"^^xsd:float, ?tmpComponentScore) AS ?finalComponentScore)
    BIND(IF(?failureScore = "10"^^xsd:float, "1.0"^^xsd:float, ?failureScore) AS ?finalFailureScore)
    
    BIND(
      (IF(BOUND(?finalComponentScore), ?finalComponentScore, "1.0"^^xsd:float) 
        * IF(BOUND(?finalFailureScore), ?finalFailureScore, "1.0"^^xsd:float)
      ) AS ?aggregateScore)
  }
""" ;
    ] ;
  sml:replace true ;
.

:concatenate-multiple-components
  a sml:ApplyConstruct ;
  sm:next :concatenate-multiple-failures ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """
  CONSTRUCT{
    ?row  :MultipleComponents ?concatenatedComponents.

   }WHERE{
     ?row :multipleComponents ?components

    {
      SELECT ?row (GROUP_CONCAT(?components; separator=", ") as ?concatenatedComponents)
      WHERE {
        ?row :multipleComponents ?components.
      }GROUP BY ?row ORDER BY ?components
    }
}""" ;
    ] ;
  sml:replace false;
.

:concatenate-multiple-failures
  a sml:ApplyConstruct ;
  sm:next :add-table-schema ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """
  CONSTRUCT{
    ?row  :MultipleFailures   ?concatenatedFailures .

   }WHERE{
    ?row :multipleFailures ?failures.
    {
      SELECT ?row (GROUP_CONCAT(?failures; separator=", ") as ?concatenatedFailures)
      WHERE {
        ?row :multipleFailures ?failures.
      } GROUP BY ?row ORDER BY ?failures
    }

}""" ;
    ] ;
  sml:replace false;
.

:add-table-schema
  a sml:ApplyConstruct ;
  sm:next :convert-to-csv ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """
  CONSTRUCT{
    [ a       <http://www.w3.org/ns/csvw#TableGroup> ;
  <http://www.w3.org/ns/csvw#table>
          [ a       <http://www.w3.org/ns/csvw#Table> ;
            <http://www.w3.org/ns/csvw#tableSchema>
                    [ a       <http://www.w3.org/ns/csvw#TableSchema> ;
                      <http://www.w3.org/ns/csvw#columns>
                              ( _:b0
                                _:b1
                                _:b2
                                _:b3
                                _:b4
                                _:b5
                                _:b6
                                _:b7
                                _:b8
                                _:b9
                                _:b10
                                _:b11
                                _:b12
                                _:b13
                                _:b14
                                _:b15
                              )
                    ] ;
          ]
] .

_:b0
	a                  <http://www.w3.org/ns/csvw#Column> ;
	kbss-csvw:property :DocumentId ;
	csvw:title         "Document Id" ;
	csvw:name          "DocumentId" .

_:b1
	a                  <http://www.w3.org/ns/csvw#Column> ;
	kbss-csvw:property :DocumentLineNumber ;
	csvw:title         "Document Line Number" ;
	csvw:name          "DocumentLineNumber" .

_:b2
	a                  <http://www.w3.org/ns/csvw#Column> ;
	kbss-csvw:property :WorkOrderId ;
	csvw:title         "Word Order Id" ;
	csvw:name          "WorkOrderId" .

_:b3
	a                  <http://www.w3.org/ns/csvw#Column> ;
	kbss-csvw:property :TaskCardId ;
	csvw:title         "Task Card Id" ;
	csvw:name          "TaskCardId" .

_:b4
	a                  <http://www.w3.org/ns/csvw#Column> ;
	kbss-csvw:property :ComponentUri ;
	csvw:title         "Component Uri" ;
	csvw:name          "ComponentUri" .

_:b5
	a                  <http://www.w3.org/ns/csvw#Column> ;
	kbss-csvw:property :ComponentLabel ;
	csvw:title         "Component Label" ;
	csvw:name          "ComponentLabel" .

_:b6
	a                  <http://www.w3.org/ns/csvw#Column> ;
	kbss-csvw:property :ComponentScore ;
	csvw:title         "Component Score" ;
	csvw:name          "ComponentScore" .

_:b7
	a                  <http://www.w3.org/ns/csvw#Column> ;
	kbss-csvw:property :MultipleComponents ;
	csvw:title         "Multiple Comonents" ;
	csvw:name          "MultipleComponents" .

_:b8
	a                  <http://www.w3.org/ns/csvw#Column> ;
	kbss-csvw:property :FailureUri ;
	csvw:title         "Failure Uri" ;
	csvw:name          "FailureUri" .

_:b9
	a                  <http://www.w3.org/ns/csvw#Column> ;
	kbss-csvw:property :FailureLabel ;
	csvw:title         "Failure Label" ;
	csvw:name          "FailureLabel" .

_:b10
	a                  <http://www.w3.org/ns/csvw#Column> ;
	kbss-csvw:property :FailureScore ;
	csvw:title         "Failure Score" ;
	csvw:name          "FailureScore" .

_:b11
	a                  <http://www.w3.org/ns/csvw#Column> ;
	kbss-csvw:property :MultipleFailures ;
	csvw:title         "Multiple Failures" ;
	csvw:name          "MultipleFailures" .

_:b12
	a                  <http://www.w3.org/ns/csvw#Column> ;
	kbss-csvw:property :AggregateScore ;
	csvw:title         "Aggregate Score" ;
	csvw:name          "AggregateScore" .

_:b13
	a                  <http://www.w3.org/ns/csvw#Column> ;
	kbss-csvw:property :IsConfirmed ;
	csvw:title         "Is Confirmed" ;
	csvw:name          "IsConfirmed" .

_:b14
	a                  <http://www.w3.org/ns/csvw#Column> ;
	kbss-csvw:property :OriginalText ;
	csvw:title         "Original Text" ;
	csvw:name          "OriginalText" .

_:b15
	a                  <http://www.w3.org/ns/csvw#Column> ;
	kbss-csvw:property :AnnotatedText ;
	csvw:title         "Annotated Text" ;
	csvw:name          "AnnotatedText" .

   }WHERE{
}""" ;
    ] ;
  sml:replace false;
.

:convert-to-csv
  a kbss-module:RDF2CSV;
  sm:next :transform-text-analysis-data_Return ;
  km-convert:data-prefix "http://onto.fel.cvut.cz/ontologies/csat/text-analysis-0.1/";
  km-convert:file-output-path "output.csv";
.

:transform-text-analysis-data
  a sm:Function ;
  sm:returnModule :transform-text-analysis-data_Return ;
  rdfs:subClassOf sm:Functions ;
.


:transform-text-analysis-data_Return
  a sml:ReturnRDF ;
  sml:serialization sml:Turtle ;
.

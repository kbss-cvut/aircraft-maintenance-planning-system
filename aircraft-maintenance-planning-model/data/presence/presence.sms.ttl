# baseURI: http://onto.fel.cvut.cz/ontologies/csat/presence-0.1
# imports: http://onto.fel.cvut.cz/ontologies/csat-maintenance
# imports: http://onto.fel.cvut.cz/ontologies/csat/tabular-data-0.1
# imports: http://onto.fel.cvut.cz/ontologies/s-pipes-lib

@prefix : <http://onto.fel.cvut.cz/ontologies/csat/presence-0.1/> .
@prefix ata: <http://onto.fel.cvut.cz/voc/ata-100/> .
@prefix cm: <http://onto.fel.cvut.cz/ontologies/csat-maintenance/> .
@prefix cmd: <http://onto.fel.cvut.cz/ontologies/csat-maintenance-data/> .
@prefix config: <http://onto.fel.cvut.cz/ontologies/csat/config/> .
@prefix csvw: <http://www.w3.org/ns/csvw#> .
@prefix dl: <http://onto.fel.cvut.cz/ontologies/csat/data-lib/> .
@prefix doc: <http://onto.fel.cvut.cz/ontologies/documentation/> .
@prefix kbss-module: <http://onto.fel.cvut.cz/ontologies/lib/module/> .
@prefix kbss-timef: <http://onto.fel.cvut.cz/ontologies/lib/function/time/> .
@prefix km-sesame: <http://onto.fel.cvut.cz/ontologies/lib/module/sesame/> .
@prefix km-tabular: <http://onto.fel.cvut.cz/ontologies/lib/module/tabular/> .
@prefix ms: <http://onto.fel.cvut.cz/ontologies/maintenance-schema/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix td: <http://onto.fel.cvut.cz/ontologies/csat/tabular-data-0.1/> .
@prefix ufo: <http://onto.fel.cvut.cz/ontologies/ufo/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://onto.fel.cvut.cz/ontologies/csat/presence-0.1>
  a owl:Ontology ;
  owl:imports <http://onto.fel.cvut.cz/ontologies/csat-maintenance> ;
  owl:imports <http://onto.fel.cvut.cz/ontologies/csat/tabular-data-0.1> ;
  owl:imports <http://onto.fel.cvut.cz/ontologies/s-pipes-lib> ;
.
:append-next
  a sml:ApplyConstruct ;
  sm:next :construct-events ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 1 - one day events
CONSTRUCT {
     ?rd1 :next  ?rd2 .
} WHERE {
    ?rd1 :possibly-next ?rd2 .
    ?rd1 :date ?date ;
        :start-time ?startTime .
    ?rd2 :date ?date ;
        :end-time ?endTime .

    FILTER NOT EXISTS {
        ?rdNE :date ?date ;
            :end-time ?endTimeNE .
        FILTER(?startTime < ?tNE)
        FILTER(?tNE < ?endTime)
    }
}""" ;
    ] ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 2 - two days events
CONSTRUCT {
     ?rd1 :next  ?rd2 .
} WHERE {
    ?rd1 a :can-form-two-days-event ;
           :Employee_No ?Employee_No ;
           :date ?date ;
           :start-time ?startTime .

    BIND(kbss-timef:add-days(?date, 1) as ?nextDay)

    ?rd2 a :can-form-two-days-event ;
            :Employee_No ?Employee_No ;
            :date ?nextDay ;
           :end-time ?endTime .
}""" ;
    ] ;
  rdfs:label "append-next" ;
.
:append-possible-next
  a sml:ApplyConstruct ;
  sm:next :identify-possible-two-days-events ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """CONSTRUCT {
     ?rd1 :possibly-next ?rd2 .
} WHERE {
    ?rd1 :Employee_No ?Employee_No ;
        :date ?date ;
        :start-time ?time1 .
    ?rd2:Employee_No ?Employee_No ;
        :date ?date ;
        :end-time ?time2 .
    FILTER(?rd1 != ?rd2)
    FILTER(?time1 < ?time2)
}""" ;
    ] ;
  sml:replace false ;
  rdfs:label "append-possible-next" ;
.
:append-start-end-times
  a sml:ApplyConstruct ;
  sm:next :append-possible-next ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 1 - end time
CONSTRUCT {
     ?rd :end-time ?endTime .
} WHERE {
    ?rd :Employee_No ?Employee_No ;
        :status_1 \"N\" ;
        :time ?time .

    BIND(STRDT(?time, xsd:time) as ?endTime)
}""" ;
    ] ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 1 - start time
CONSTRUCT {
     ?rd :start-time ?startTime .
} WHERE {
    ?rd :Employee_No ?Employee_No ;
        :status_1 \"A\" ;
        :time ?time .

    BIND(STRDT(?time, xsd:time) as ?startTime)
}""" ;
    ] ;
  sml:replace false ;
  rdfs:label "append-start-end-times" ;
.
:construct-csat-maintenance-data
  a sml:ApplyConstruct ;
  sm:next :transform ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 1 - extract ontology
CONSTRUCT {
    <http://onto.fel.cvut.cz/ontologies/csat-maintenance/presence-12345> a owl:Ontology ;
              owl:imports <http://onto.fel.cvut.cz/ontologies/csat-maintenance> .

    ?mechanic a cm:mechanic .

} WHERE {
    ?rd :Employee_No ?Employee_No .
    ?rd :status_1 ?status_1 .
    ?rd :status_2 ?status_2 .
    ?rd :date ?date .
    ?rd :time ?time .

      BIND(dl:instance(cm:mechanic, ?Employee_No) as ?mechanic)
}""" ;
    ] ;
  sml:replace true ;
  rdfs:label "construct-csat-maintenance-data" ;
.
:construct-events
  a sml:ApplyConstruct ;
  sm:next :transform ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 2 - extract events
CONSTRUCT {
     ?presence a cm:presence ;
         cm:start-date ?d1;
         cm:start-time ?t1 ;
         cm:end-date ?d2 ;
         cm:end-time ?t2 ;
         cm:has-participant  ?mechanic .
     ?mechanic a cm:mechanic .
} WHERE {
    ?rd1 :next ?rd2 .
    ?rd1 :Employee_No ?Employee_No ;
        :date ?date1 ;
        :start-time ?t1 .
    ?rd2:Employee_No ?Employee_No ;
        :date ?date2 ;
        :end-time ?t2 .

    ?r1 csvw:describes ?rd1 .
    ?r1 csvw:url ?r1Url .

    BIND(STRDT(?date1, xsd:date) as ?d1)
    BIND(STRDT(?date2, xsd:date) as ?d2)
    BIND(dl:instance(cm:presence, dl:id-3(?Employee_No, ?date1, str(?t1))) as ?presence)
    BIND(dl:instance(cm:mechanic, ?Employee_No) as ?mechanic)
}""" ;
    ] ;
  sml:replace true ;
  rdfs:label "construct-events" ;
.
:deploy-presence-data
  a sm:Function ;
  sm:returnModule td:deploy-data_Return ;
  rdfs:subClassOf sm:Functions ;
.
:identify-possible-two-days-events
  a sml:ApplyConstruct ;
  sm:next :append-next ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 1 - identify end of the day available event
CONSTRUCT {
     ?rd a :can-form-two-days-event .
} WHERE {
   ?rd  :start-time ?time .
    FILTER NOT EXISTS {
         ?rd :possibly-next ?rdNE .
     }
}""" ;
    ] ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 2 - identify start of the day not available event
CONSTRUCT {
     ?rd a :can-form-two-days-event .
} WHERE {
   ?rd :end-time ?time .
    FILTER NOT EXISTS {
         ?rdNE  :possibly-next ?rd .
     }
}""" ;
    ] ;
  sml:replace false ;
  rdfs:label "identify-possible-two-days-events" ;
.
:transform
  a sml:ApplyConstruct ;
  sm:next td:merge ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 1 - no transformation
CONSTRUCT {
} WHERE {
}""" ;
    ] ;
  sml:replace false ;
.
:transform-presence-data
  a sm:Function ;
  sm:returnModule td:transform-data_Return ;
  rdfs:subClassOf sm:Functions ;
.
td:deploy-data_Return
  rdfs:label "deploy-presence-data" ;
.
td:rdfize-input-data
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.01 - column Employee_No has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :Employee_No ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.02 - column status_1 has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :status_1 ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.03 - column status_2 has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :status_2 ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.04 - column date has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :date ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.05 - column time has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :time ?notExistValue .
    }
}""" ;
    ] ;
  km-tabular:data-prefix [
      a sp:str ;
      sp:arg1 : ;
    ] ;
  km-tabular:delimiter ";" ;
  sm:next :append-start-end-times ;
  sm:next :construct-csat-maintenance-data ;
.
td:transform-data_Return
  rdfs:label "transform-presence-data" ;
.

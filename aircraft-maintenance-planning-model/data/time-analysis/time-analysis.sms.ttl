# baseURI: http://onto.fel.cvut.cz/ontologies/csat/time-analysis-0.1
# imports: http://onto.fel.cvut.cz/ontologies/csat-maintenance
# imports: http://onto.fel.cvut.cz/ontologies/csat/tabular-data-0.1
# imports: http://onto.fel.cvut.cz/ontologies/csat/time-analysis-0.1/input-data-schema
# imports: http://onto.fel.cvut.cz/ontologies/s-pipes-lib

@prefix : <http://onto.fel.cvut.cz/ontologies/csat/time-analysis-0.1/> .
@prefix ata: <http://onto.fel.cvut.cz/voc/ata-100/> .
@prefix cm: <http://onto.fel.cvut.cz/ontologies/csat-maintenance/> .
@prefix cmd: <http://onto.fel.cvut.cz/ontologies/csat-maintenance-data/> .
@prefix config: <http://onto.fel.cvut.cz/ontologies/csat/config/> .
@prefix csvw: <http://www.w3.org/ns/csvw#> .
@prefix dl: <http://onto.fel.cvut.cz/ontologies/csat/data-lib/> .
@prefix doc: <http://onto.fel.cvut.cz/ontologies/documentation/> .
@prefix kbss-module: <http://onto.fel.cvut.cz/ontologies/lib/module/> .
@prefix km-rdf4j: <http://onto.fel.cvut.cz/ontologies/lib/module/rdf4j/> .
@prefix km-sesame: <http://onto.fel.cvut.cz/ontologies/lib/module/sesame/> .
@prefix km-tabular: <http://onto.fel.cvut.cz/ontologies/lib/module/tabular/> .
@prefix ms: <http://onto.fel.cvut.cz/ontologies/maintenance-schema/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix td: <http://onto.fel.cvut.cz/ontologies/csat/tabular-data-0.1/> .
@prefix ufo: <http://onto.fel.cvut.cz/ontologies/ufo/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

td:check-input-data-schema
  sm:next :construct-csat-maintenance-data ;
.
td:construct-day-bound-event-duration
  sm:next :transform ;
  sml:replace false ;
.
td:construct-maintenance-group-abbreviations
  sm:next td:rdfize-input-data ;
.
td:deploy-data_Return
  rdfs:label "deploy-time-analysis-data" ;
.
td:deploy-to-rdf4j-server
  km-rdf4j:p-rdf4j-context-iri [
      a sp:str ;
      sp:arg1 [
          sp:varName "outputOntologyIRI" ;
        ] ;
    ] ;
.
td:import-input-data-schema
  sml:baseURI [
      a sp:concat ;
      sp:arg1 [
          a sp:str ;
          sp:arg1 : ;
        ] ;
      sp:arg2 "input-data-schema" ;
    ] ;
.
td:import-scheme
  sm:next td:rdfize-input-data ;
.
td:rdfize-input-data
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.01 - column bookingno_i has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :bookingno_i ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.02 - column Employee_No has empty value
# TODO discuss with MK
ASK
WHERE {
#    ?t csvw:row/csvw:describes ?rd .
#    FILTER NOT EXISTS {
#          ?rd :Employee_No ?notExistValue .
#    }
    FILTER(false)
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.03 - column user_sign has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :user_sign ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.04 - column Start_Date has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :Start_Date ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.05 - column Start_Time has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :Start_Time ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.06 - column End_Time has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :End_Time ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.07 - column Duration_Full has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :Duration_Full ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.08 - column Scope has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :Scope ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.09 column Type has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :Type ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.10 - column WO_TC has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :WO_TC ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1.11 - column Real_date_of_booking_entry has empty value
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    FILTER NOT EXISTS {
          ?rd :Real_date_of_booking_entry ?notExistValue .
    }
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 2 - duration full is not  0 when start time and end time are same
ASK
WHERE {
   ?t csvw:row/csvw:describes ?rd .

    FILTER NOT EXISTS  {
          ?rd :End_Date ?endDateNE .
    }

    OPTIONAL  {
         ?rd :Duration_Full ?durationFull .
         ?rd :End_Time ?endTime .
    }
    FILTER(
         ?durationFull != \"0.000000\"
         || ?endTime != \"00:00\"
    )
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 3 - found scope that is not defined in schema ontology
ASK
WHERE {
    ?t csvw:row/csvw:describes ?rd .
    ?rd :Scope ?maintenanceGroupAbbr .

    FILTER NOT EXISTS {
         ?maintenanceGroup  dl:has-simple-abbreviation ?maintenanceGroupAbbr .
    }
}""" ;
    ] ;
  km-tabular:data-prefix [
      a sp:str ;
      sp:arg1 : ;
    ] ;
  km-tabular:delimiter "	" ;
  km-tabular:quote-character "\"" ;
  sm:next :construct-csat-maintenance-data ;
.
td:transform-data_Return
  rdfs:label "transform-time-analysis-data" ;
.
<http://onto.fel.cvut.cz/ontologies/csat/time-analysis-0.1>
  a owl:Ontology ;
  owl:imports <http://onto.fel.cvut.cz/ontologies/csat-maintenance> ;
  owl:imports <http://onto.fel.cvut.cz/ontologies/csat/tabular-data-0.1> ;
  owl:imports :input-data-schema ;
  owl:imports <http://onto.fel.cvut.cz/ontologies/s-pipes-lib> ;
.
:bind-output-ontology-iri
  a sml:BindWithConstant ;
  sm:next :construct-csat-maintenance-data ;
  sm:outputVariable "outputOntologyIRI" ;
  sml:value cm:time-analysis-12345 ;
  rdfs:label "bind-output-ontology-iri" ;
.
:construct-csat-maintenance-data
  a sml:ApplyConstruct ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# employee is part of multiple  maintenance lines
ASK  {
    ?mechanicIRI a cm:mechanic ;
        cm:is-part-of-maintenance-line ?ml1 ;
        cm:is-part-of-maintenance-line ?ml2 ;
  .
  FILTER(?ml1 != ?ml2)
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# work-package has multiple scheduled-end-times
ASK  {
 ?workpackageIRI a cm:workpackage  ;
        cm:workpackage-scheduled-end-time ?t1 ;
        cm:workpackage-scheduled-end-time ?t2 ;
  .
  FILTER(?t1 != ?t2)
}""" ;
    ] ;
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# workpackage has multiple responsible maintenance lines
ASK  {
 ?workpackageIRI a cm:workpackage  ;
        cm:has-responsible-maintenance-line ?ml1 ;
        cm:has-responsible-maintenance-line ?ml2 ;
  .
  FILTER(?ml1 != ?ml2)
}""" ;
    ] ;
  sm:next :construct-one-day-worksessions ;
  sm:next :transform ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 1 - extract ontology
CONSTRUCT {
    ?outputOntologyIRI a owl:Ontology ;
        owl:imports <http://onto.fel.cvut.cz/ontologies/csat-maintenance> ;
    .

    ?workpackageIRI a cm:workpackage, owl:NamedIndividual ;
        cm:id ?workpackageId ;
        cm:workpackage-scheduled-start-time ?wpStartDateScheduled ;
        cm:workpackage-scheduled-end-time ?wpEndDateScheduled ;
        cm:workpackage-start-time ?wpStartDateReal ;
        cm:workpackage-end-time ?wpEndDateReal ;
        cm:has-client ?clientIRI ;
        cm:is-repair-of ?aircraftIRI ;
        cm:has-responsible-maintenance-line ?workpackageMaintenanceLineIRI ;
    .

    ?subProjectIRI a cm:sub-project, owl:NamedIndividual ;
           cm:id ?project ;           
    .

    ?taskExecutionIRI a cm:complex-execution, ?taskTypeIRI, owl:NamedIndividual ;
        cm:is-part-of-workpackage ?workpackageIRI ;
        cm:is-task-of-sub-project ?subProjectIRI ;
    .

# TODO either add cm:task-type to csat-maintenance ontology or remove from here
    ?taskTypeIRI a owl:Class,  owl:NamedIndividual, cm:task-type  ;
        cm:id ?WO_TC ;
        rdfs:subClassOf ?taskSuperClassIRI;
    .

    ?workSessionIRI a cm:work-session ;
        cm:is-part-of-maintenance-task ?taskExecutionIRI ;
        cm:start-date ?startDate ;
        cm:start-time ?startTime ;
        cm:end-date ?endDate ;
        cm:end-time ?endTime ;
        cm:duration-in-hours ?durationInHours ;
        cm:task-description ?Description ;
        cm:has-scope ?maintenanceGroupIRI ;
    .

    ?mechanicIRI a cm:mechanic ;
        cm:id ?Employee_No ;
		cm:user-sign ?user_sign ;
        cm:performs ?workSessionIRI ;
        cm:is-part-of-maintenance-line ?employeeMaintenanceLineIRI ;
    .

   ?employeeMaintenanceLineIRI a cm:maintenance-line ;
        cm:id ?employeeMaintenanceLineId ;
    .

   ?workpackageMaintenanceLineIRI a cm:maintenance-line ;
        cm:id ?workpackageMaintenanceLineId ;
    .

    ?maintenanceGroupIRI a cm:maintenance-group ;
        cm:has-abbreviation ?mainMaintenanceGroupAbbr ;
    .

    ?clientIRI a cm:client, owl:NamedIndividual ;
        cm:id ?operator ;
    .

    ?aircraftIRI a cm:aircraft, owl:NamedIndividual;
        cm:registration ?acRegistration ;
        cm:model ?acModel ;
        cm:age ?acAge ;
    .
} WHERE {
     ?rd :bookingno_i ?bookingno_i .
     OPTIONAL {
        ?rd :Employee_No ?Employee_No .
     }
     ?rd :user_sign ?user_sign .
     ?rd :Start_Date ?Start_Date .
     ?rd :Start_Time ?Start_Time .
     OPTIONAL {
        ?rd :End_Date ?End_Date .
     }
     ?rd :End_Time ?End_Time .
     ?rd :Duration_Full ?Duration_Full .
     ?rd :Scope ?Scope .
     OPTIONAL {
        ?rd :Shift_Group ?shiftGroupId .
     }
     ?rd :Type ?taskSuperTypeId .
     ?rd :WO_TC ?WO_TC .
     OPTIONAL {
        ?rd :defect_class ?defect_class .
     }
     OPTIONAL {
        ?rd :TC_reference ?TC_reference .
     }
     OPTIONAL {
        ?rd :Closing_date ?Closing_date .
     }
     OPTIONAL {
        ?rd :Description ?Description .
     }
     OPTIONAL {
        ?rd :Workpackage ?workpackageId .
     }
     OPTIONAL {
        ?rd :A_C_model ?acModel .
     }
     OPTIONAL {
        ?rd :A_C_age ?A_C_age .
     }
     OPTIONAL {
        ?rd :Start_date___scheduled ?Start_date___scheduled .
     }
     OPTIONAL {
        ?rd :End_date___scheduled ?End_date___scheduled .
     }
     OPTIONAL {
        ?rd :Start_date___real ?Start_date___real .
     }
     OPTIONAL {
        ?rd :End_date___real ?End_date___real .
     }
     OPTIONAL {
        ?rd :Line ?workpackageMaintenanceLineId .
     }
     ?rd :Real_date_of_booking_entry ?Real_date_of_booking_entry .
     OPTIONAL {
        ?rd :project ?project .
     }
     OPTIONAL {
        ?rd :AC_registration ?acRegistration .
     }
     OPTIONAL {
        ?rd :operator ?operator    .
     }

     ?maintenanceGroupIRI dl:has-simple-abbreviation ?Scope .
     ?maintenanceGroupIRI dl:has-main-abbreviation ?mainMaintenanceGroupAbbr .

     BIND(dl:instance(cm:workpackage, ?workpackageId) as ?workpackageIRI)
     BIND(dl:instance(cm:complex-execution, dl:id-2(?workpackageId, ?WO_TC)) as ?taskExecutionIRI)

     BIND(dl:normalize(?project) as ?subProjectNormalizedId)
     BIND(dl:instance(cm:sub-project, ?subProjectNormalizedId) as ?subProjectIRI)

     BIND(?A_C_age as ?acAge)
     BIND(dl:instance(cm:aircraft, ?workpackageId) as ?aircraftIRI)

     BIND(dl:id-2(?taskSuperTypeId, ?WO_TC) as ?taskTypeNormalizedId)
     BIND(dl:instance(cm:task-type, ?taskTypeNormalizedId) as ?taskTypeIRI)

     BIND(IF(?taskSuperTypeId =  \"TC\", \"task-card\",  ?x) as ?tc)
     BIND(IF(?taskSuperTypeId =  \"S\", \"scheduled-work-order\",  ?x) as ?s)
     BIND(IF(?taskSuperTypeId =  \"M\", \"maintenance-work-order\",   ?x) as ?m)
     BIND(COALESCE(?tc, ?s, ?m) as ?taskSuperClassName)
     BIND(IRI(concat(str(cm:), ?taskSuperClassName)) as ?taskSuperClassIRI)

     BIND(dl:instance(cm:mechanic, ?Employee_No) as ?mechanicIRI)
     BIND(dl:instance(cm:work-session, ?bookingno_i) as ?workSessionIRI)

     BIND(spif:parseDate( ?Start_date___scheduled, \"dd.MM.yyyy\") as ?wpStartDateScheduled)
     BIND(spif:parseDate(?End_date___scheduled, \"dd.MM.yyyy\") as ?wpEndDateScheduled)
     BIND(spif:parseDate(?Start_date___real, \"dd.MM.yyyy\") as ?wpStartDateReal)
     BIND(spif:parseDate(?End_date___real, \"dd.MM.yyyy\") as ?wpEndDateReal)

     BIND(spif:parseDate(?Start_Date, \"dd.MM.yyyy\") as ?startDate)
     BIND(spif:parseDate(?Start_Time, \"HH:m\") as ?startTime)
     BIND(spif:parseDate(?End_Date, \"dd.MM.yyyy\") as ?endDate)
     BIND(IF(?End_Date, spif:parseDate(?End_Time, \"HH:m\"), ?notBound) as ?endTime)
     BIND(IF(?End_Date, xsd:decimal(?Duration_Full), ?notBound) as ?durationInHours)

     BIND(dl:instance(cm:client, ?operator) as ?clientIRI)

     BIND(replace(
            replace(
                ?shiftGroupId,
                \"^[^_]*_L\",
                \"\"
            ),
            \"_.*\",
            \"\"
     )as ?employeeMaintenanceLineId)

     BIND(dl:instance(cm:maintenance-line, ?workpackageMaintenanceLineId) as ?workpackageMaintenanceLineIRI)
     BIND(dl:instance(cm:maintenance-line, ?employeeMaintenanceLineId) as ?employeeMaintenanceLineIRI)
}""" ;
    ] ;
  sml:replace true ;
  rdfs:label "construct-csat-maintenance-data" ;
.
:construct-one-day-worksessions
  a sml:ApplyConstruct ;
  sm:next td:construct-day-bound-event-duration ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 1 - make one day work-sessions of type day-boundary-event
CONSTRUCT {
     ?workSession a cm:day-bound-event .
}
WHERE {
   ?workSession a cm:work-session ;
         cm:start-date ?d1;
         cm:end-date ?d2 ;
         cm:end-time ?t2 ;
    .
    FILTER(?d1 = ?d2 || ?t2 = \"00:00:00\"^^xsd:time)
}""" ;
    ] ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 2 - split two day work-sessions into one day presences
CONSTRUCT {
     ?workSessionFirstDay a cm:day-bound-event ;
         cm:start-date ?d1;
         cm:start-time ?t1 ;
         cm:end-date ?d2 ;
         cm:end-time ?midnight ;
         cm:is-day-bound-part-of ?workSession  ;
     .
     ?workSessionSecondDay a cm:day-bound-event ;
         cm:start-date ?d2;
         cm:start-time ?midnight ;
         cm:end-date ?d2 ;
         cm:end-time ?t2 ;
         cm:is-day-bound-part-of ?workSession  ;
     .
}
WHERE {
   ?workSession a cm:work-session ;
         cm:start-date ?d1;
         cm:start-time ?t1 ;
         cm:end-date ?d2 ;
         cm:end-time ?t2 ;
        cm:duration-in-hours ?durationInHours ;
    .
    FILTER(?d1 != ?d2)
    BIND(iri(concat(str(?workSession),\"-1\")) as ?workSessionFirstDay)
    BIND(iri(concat(str(?workSession),\"-2\")) as ?workSessionSecondDay)
    BIND(\"00:00:00\"^^xsd:time as ?midnight)
}""" ;
    ] ;
  sml:replace true ;
  rdfs:label "construct-day-bound-worksessions" ;
.
:deploy-time-analysis-data
  a sm:Function ;
  sm:returnModule td:deploy-data_Return ;
  rdfs:subClassOf sm:Functions ;
.
:transform
  a sml:ApplyConstruct ;
  sm:next td:merge ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 1 - convert endDate
CONSTRUCT {
     ?s  cm:end-time ?endDate .
} WHERE {
     ?s  cm:end-timeX ?endDateNotParsed .
#      BIND(spif:parseDate(?endDateNotParsed ,\"dd.MM.yyyy\") as ?endDate)
}""" ;
    ] ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 1 - convert issueDate
CONSTRUCT {
     ?s  cm:issue-time ?issueDate .
} WHERE {
     ?s  cm:issue-timeX ?issueDateNotParsed .
#      BIND(spif:parseDate(?issueDateNotParsed ,\"dd.MM.yyyy\") as ?issueDate)
}""" ;
    ] ;
  sml:replace false ;
.
:transform-time-analysis-data
  a sm:Function ;
  sm:returnModule td:transform-data_Return ;
  rdfs:subClassOf sm:Functions ;
.
